After installing the accessusage scripts as described in the INSTALL file
the tester should, using their own account (with allocations), run the
accessusage script, and look for reasonable output.

===Test 1: Show tester's projects on current resource===

Steps:
   # verify accessusage is listed in modules dir
   $ module avail

   # verify accessusage is in path
   $ module load accessusage
   $ which accessuage

   # verify manpage is displayed
   $ man accessusage

   $ accessusage

Results:
* the output should look like the following:

one or more stanzas of:

Project: <project identifier>/<resource name> [""|status=inactive]
PI: <name of PI>
Allocation: <start date>/<end date>
 Total=<size of allocation> Remaining=<amount remaining> Usage=<how much has been used> Jobs=<number of jobs>
   <name of querying user> portal=<xsede portal name for user> usage=<personal usage> jobs=<personal number of jobs>

Notes:
* status=inactive appears on the Project: line if the project is no longer active; 
* If the project is active, no "status=" will appear

   # verify api version.
   $ accessusage -V

   # if output has "api version 1", please test the api version 2 specifically
   # by running the below command.  Output should match similarly to above but usage
   # numbers will differ since the newer database doesn't have new data yet.
   $ accessusage -av 2 



Then, from an account that is in an admin_name declaration in accessusage.conf, the 
tester should perform Test 2:

===Test 2: Query by another username===

Prerequisites:
* tester's account in admin_name declaration in accessusage.conf

Steps:
  # verify you can emulate another user on this machine as an admin account
  $ env USER=<username> accessusage 

Results:
* Output will be as in test 1 above, but with usage information for the user specified by $USER instead of the user performing the test

